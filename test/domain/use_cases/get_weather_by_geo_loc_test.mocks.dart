// Mocks generated by Mockito 5.4.0 from annotations
// in weatherseeker/test/domain/use_cases/get_weather_by_geo_loc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:weatherseeker/domain/entities/weather_entity.dart' as _i2;
import 'package:weatherseeker/domain/repositories/weather_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWeatherForecast_0 extends _i1.SmartFake
    implements _i2.WeatherForecast {
  _FakeWeatherForecast_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WeatherRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherRepository extends _i1.Mock implements _i3.WeatherRepository {
  MockWeatherRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WeatherForecast call(
    String? latitude,
    String? longitude,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            latitude,
            longitude,
          ],
        ),
        returnValue: _FakeWeatherForecast_0(
          this,
          Invocation.method(
            #call,
            [
              latitude,
              longitude,
            ],
          ),
        ),
      ) as _i2.WeatherForecast);
}
